Класс UserManager
Конструктор __init__

def __init__(self):
    self.users = {}  # Словарь для хранения пользователей с идентификаторами
    self.name_to_ids = {}  # Словарь для быстрого поиска идентификаторов по имени
    self.next_id = 1  # Счетчик для уникальных идентификаторов
self.users: Словарь для хранения пользователей, где ключом является уникальный идентификатор пользователя, а значением — его имя.
self.name_to_ids: Словарь, где ключом является имя пользователя, а значением — список идентификаторов пользователей с этим именем. Это позволяет быстро находить всех пользователей с определенным именем.
self.next_id: Счетчик, который автоматически увеличивается для присвоения нового уникального идентификатора каждому новому пользователю.
Метод addUser

def addUser(self, name):
    user_id = self.next_id
    self.users[user_id] = name
    if name not in self.name_to_ids:
        self.name_to_ids[name] = []
    self.name_to_ids[name].append(user_id)
    self.next_id += 1
    return user_id
user_id = self.next_id: Получаем следующий уникальный идентификатор.
self.users[user_id] = name: Добавляем нового пользователя в словарь users.
if name not in self.name_to_ids: self.name_to_ids[name] = []: Проверяем, есть ли уже запись для этого имени в name_to_ids. Если нет, создаем новый список.
self.name_to_ids[name].append(user_id): Добавляем идентификатор пользователя в список идентификаторов для данного имени.
self.next_id += 1: Увеличиваем счетчик идентификаторов для следующего пользователя.
return user_id: Возвращаем идентификатор нового пользователя.
Метод getUser

def getUser(self, user_id):
    return self.users.get(user_id, None)
Используем метод get словаря users, чтобы получить имя пользователя по его идентификатору. Если идентификатор не найден, возвращаем None.
Метод deleteUser

def deleteUser(self, user_id):
    if user_id in self.users:
        name = self.users[user_id]
        del self.users[user_id]
        self.name_to_ids[name].remove(user_id)
        if not self.name_to_ids[name]:
            del self.name_to_ids[name]
        return True
    return False
Проверяем, существует ли пользователь с указанным идентификатором.
Если да, удаляем пользователя из словаря users.
Также удаляем идентификатор из списка идентификаторов для этого имени в name_to_ids.
Если после удаления идентификатора список идентификаторов для имени пуст, удаляем запись для этого имени из name_to_ids.
Возвращаем True, если пользователь был удален, иначе False.
Метод findUserByName

def findUserByName(self, name):
    return self.name_to_ids.get(name, [])
Используем метод get словаря name_to_ids, чтобы получить список идентификаторов пользователей с указанным именем. Если имя не найдено, возвращаем пустой список.

Функция main
def main():
    userManager = UserManager()
    while True:
        print("\nВыберите действие:")
        print("1. Добавить пользователя")
        print("2. Найти пользователя по ID")
        print("3. Удалить пользователя по ID")
        print("4. Найти пользователей по имени")
        print("5. Выход")
        
        choice = input("Введите номер действия: ")
        
        if choice == '1':
            name = input("Введите имя пользователя: ")
            user_id = userManager.addUser(name)
            print(f"Пользователь '{name}' добавлен. Его ID: {user_id}.")
        
        elif choice == '2':
            user_id = int(input("Введите ID пользователя: "))
            name = userManager.getUser(user_id)
            if name:
                print(f"Пользователь с ID {user_id} имеет имя '{name}'.")
            else:
                print("Пользователь с таким ID не найден.")
        
        elif choice == '3':
            user_id = int(input("Введите ID пользователя для удаления: "))
            if userManager.deleteUser(user_id):
                print(f"Пользователь с ID {user_id} был удален.")
            else:
                print("Пользователь с таким ID не найден.")
        
        elif choice == '4':
            name = input("Введите имя пользователя для поиска: ")
            ids = userManager.findUserByName(name)
            if ids:
                print(f"ID пользователей с именем '{name}': {ids}")
            else:
                print("Пользователи с таким именем не найдены.")
        
        elif choice == '5':
            print("Выход из программы.")
            break
        
        else:
            print("Некорректный ввод. Попробуйте снова.")
В функции main создается экземпляр UserManager.
Программа запускает бесконечный цикл, в котором выводится меню с возможными действиями.
В зависимости от выбора пользователя (choice), вызываются соответствующие методы UserManager:
1: Добавление пользователя и вывод его ID.
2: Поиск пользователя по ID и вывод его имени.
3: Удаление пользователя по ID и вывод результата операции.
4: Поиск пользователей по имени и вывод их ID.
5: Завершение работы программы.
При некорректном вводе пользователю предлагается попробовать снова.
Эта структура обеспечивает интерактивный интерфейс для управления пользователями, позволяя добавлять, искать, удалять пользователей и выходить из программы.